Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: makefield_doublecomplex(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (makefield_doublecomplex(int, int)) [1/1=100.0%] mem.c(3,60)
  -> EXTERN: (5,23) calloc(size_t, size_t)
  -> EXTERN: (6,9) printf(const char *__restrict__, ...)
  -> EXTERN: (7,9) exit(int)
  -> EXTERN: (9,22) calloc(size_t, size_t)
  -> EXTERN: (10,9) printf(const char *__restrict__, ...)
  -> EXTERN: (11,9) exit(int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mem.c(13,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mem.c(13,5)
   remark #15388: vectorization support: reference pvoid has aligned access   [ mem.c(13,29) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 4.000 
   remark #15478: estimated potential speedup: 1.690 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mem.c(13,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================
